buildscript{
	
	//⚡전역변수 선언
	ext{
		springBootVersion = '2.5.4'
	}

	//⚡repositories: 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지 결정
	repositories{
		mavenCentral()
	}
	dependencies{
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // ⭐ 스프링 부트의 의존성들을 관리해 주는 플러그인


group = 'spring.java'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {

	// compile은 연결된 API 모두가 프로젝트에 의해 노출이 되고
	// implementation은 노출되지 않는다.
	// compile은 A가 수정이 되면, B, C와 같이 의존하고 있는 오브젝트들이 모두 다시 빌드되어야 한다.
	// 반면 implementation은 A수정 시, 직접 의존하는 B만 다시 빌드를 하기 때문에 속도적인 측면에서  더 유리하다.
	// 그리고 이는 프로젝트의 구조가 복잡할수록, 커질수록 더욱 많은 퍼포먼스상 차이를 보인다.
	// gradle 3.0 이상부터는 compile 사용을 권장하지 않는다.
	//compile('org.springframework.boot:spring-boot-starter-web')
	//compile('org.springframework.boot:spring-boot-starter-test')
	implementation 'org.projectlombok:lombok:1.18.20'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-mustache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
}
